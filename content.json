{"pages":[{"title":"Initialize","text":"import npm package Core npm package is @ver01/form. Most of times you need using it with theme (eg: @ver01/form-theme-antd). Or you can define theme by yourself. Uncontrolled Mode With defaultValue props 12345678&lt;Ver01Form schema={{ title: &quot;Uncontrolled Mode:&quot;, type: &quot;string&quot; }} defaultValue=&quot;hello World&quot; onChange={this.onChange.bind(this)}/&gt; Live Demo Controlled Mode with defaultValue props 12345678&lt;Ver01Form schema={{ title: &quot;Controlled Mode:&quot;, type: &quot;string&quot; }} value={this.state.value} onChange={this.onChange.bind(this)}/&gt; Live Demo","link":"/docs-form/initialize.html"},{"title":"Documentation","text":"Ver01Form is standalone lib for render JsonSchem to React Form，with different react themes supports. Online Demo Schema Playground local Demogit clone git@github.com:ver01/form.git npm install npm run start visit http://localhost:8888 for schema demo","link":"/docs-form/index.html"},{"title":"JsonSchema","text":"@ver01/form extended Json Schema define with $vf_opt section $vf_opt.propswill mixin to all components belone to one value node. Filtered by Component Schema propsMixinList $vf_opt.widgetstring, assign the component used. Defined in Component Schema widgets $vf_opt.option For array orderable(default true) addable(default true) removeable(default true) For string disabled readonly For object order: [‘first-key’, ‘second-key’, ‘*’, ‘last-key’] $vf_opt.validate[ruleName]: ruleValue see sample-validation local demo Validate can be defined in formProps or buildin validate","link":"/docs-form/jsonSchema.html"},{"title":"Theme","text":"Antd theme is the only them avaliavle now, others will come soon. Vote the theme you wants most By Issue ~~ (1 theme in at most 1 week) Requirement@ver01/form is standalone lib. No other package needed But, you need import form theme package. Which may involve other react component framework (most of time includes in your project already). Official theme Antd Custom themeComponent SchemaWe assigned a JsonLike schema to define ReactComponents Form used. The theme entry file export structure like this. Theme entry file should export structure like this: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576// Export Themeexport default { validators: { // buildin just need msgBuilder minLength: ({ value, ruleValue, schema }) =&gt; ({ errorType: &quot;feedbackStr&quot;, errorData: `should NOT be shorter than ${ruleValue} characters`, }), ... // custom need checkLogic otherCustomValidLogic }, components: { // 5base type string: { getWidget: [({ schema }) =&gt; ({ widgetName: &quot;readonly&quot;, widgetData: { text: &quot;True&quot;}, })], // special widget pick logic: return { widgetName, widgetData } widgets: { select: { formatter: val =&gt; (val ? &quot;true&quot; : &quot;false&quot;), // format value to componet normalizer: val =&gt; (val === &quot;true&quot; ? true : false), // format value to output component: FormItem, // react component propsMixinList: [&quot;style&quot;], // user defined in JsonSchema $vf extend config props: formItemProps, // component props defined in other place children: [ // component children (recursion) { component: Select, propsMixinList: [&quot;placeholder&quot;], props: { // props can dynamic generate with $vf_ prefix; more detail see [Dynamic props generator rule] section below $vf_value: ({ value }) =&gt; value, $vf_onChange: ({ handle }) =&gt; handle.onChange } } ] }, radio: radioWidget // defined as select widget }, // widget define: { [widgetName]: WidgetComponentSchema } errorObjGenerator:({ errors }) =&gt; { const errorMessage = []; errors.map(error =&gt; { const { errorType, errorData } = error; switch (errorType) { default: errorMessage.push(errorData); break; } }); // return as errorObj return errorMessage.length ? { message: ( &lt;ul&gt; {errorMessage.map((it, ind) =&gt; ( &lt;li key={ind}&gt;{it}&lt;/li&gt; ))} &lt;/ul&gt; ), } : null; }, // generator errorObj for WidgetComponentSchema render widget }, number, integer, boolean, null, // 1root only(for body holder) root, // 1control only(for control schema oneof anyof allof) control, // 2container array, object, },}; Dynamic props generator rulefor props123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657 { isRoot: true, rootValue: {}, rootSchema: {}, parentSchema: {}, value: {}, schema: {}, objectKey: \"a\", arrayIndex: 3, handle: { onChange: () =&gt; {}, // for array canMoveUp: false, canMoveDown: false, canAppend: false, canRemove: false, moveUp: () =&gt; {}, moveDown: () =&gt; {}, append: () =&gt; {}, remove: () =&gt; {}, // for control hasSchemaControl: true, // child formnode has SchemaList schemaList: [{ schema: {}, valid: true, selected: true }], // no control is null schemaSelect: ind =&gt; { /* aform func */ }, }, schemaOption: { // read by schema.$vf_opt.option // for array: orderable: true, removable: true, appendable: true, // for string: disabled: false, readonly: false, fileHandle: () =&gt; {}, // ? // for object: order: [\"key_a\", \"key_b\"], }, formProps: { validators: {}, }, formOption: {}, errorObj: { // custom },}; for WidgetComponentSchema1234{ formatter: () =&gt; {}, normalizer: () =&gt; {},}","link":"/docs-form/theme.html"},{"title":"sitemap","text":"","link":"/sitemap.xml"},{"title":"Validate","text":"validate result will export by onValidate method when validate failed, error set as: validateErrValuePath: the path which part valued valid failed. errorObj: Generate by Component Schema errorObjGenerator function. errors: Generate by Component Schema validators function return as array [{ errorType: &quot;errorTypeString&quot;, errorData: AnyType }] 1234567891011121314151617181920212223242526render(){return &lt;div&gt; &lt;Ver01Form schema={{ &quot;type&quot;: &quot;object&quot;, &quot;required&quot;: [ &quot;firstName&quot;, ], &quot;properties&quot;: { &quot;firstName&quot;: { &quot;type&quot;: &quot;string&quot; } } }} value={{ firstName: &apos;&apos; }} // zero length string cause required check onValidate={error=&gt;this.setState({errors: error &amp;&amp; error.errors})} // error : { [validateErrValuePath]: {errorObj, errors} } /&gt; &lt;Button onClick={()=&gt;{ if (this.state.errors){ postServer(this.state.value); }else { console.info(this.state.errors); } }&gt;Submit&lt;/Button&gt;&lt;/div&gt;}","link":"/docs-form/validate.html"},{"title":"Value","text":"Value InUncontrolled Mode You need set the defaultValue props unset defaultValue &amp; value props also caused ver01Form in Uncontrolled Mode The Form will use the defaultValue in first defined, deal with some situation defaultValue set async 123456// uncontrolled Mode:&lt;Ver01Form schema={{ type: &apos;string&apos;}} defaultValue=&apos;helloWorld&apos; onChange={console.info}/&gt; Controlled Mode You need set the value props. onChange will trigger new value, but form will change when value changed. 123456// Controlled Mode:&lt;Ver01Form schema={{ type: &apos;string&apos;}} value={this.state.value} onChange={value=&gt;this.setValue({value})}/&gt; Value OutWe not export some value post method, you can get value by onChange event, then deal with it as you wish 12345678910render(){return &lt;div&gt; &lt;Ver01Form schema={{ type: &apos;string&apos;}} value={this.state.value} onChange={value=&gt;this.setValue({value})} /&gt; &lt;Button onClick={()=&gt;{postServer(this.state.value)}}&gt;Submit&lt;/Button&gt;&lt;/div&gt;}","link":"/docs-form/value.html"},{"title":"开始使用","text":"Ver01Form is standalone lib for render JsonSchem to React Form，with different react themes supports. Online Demo Schema Playground local Demogit clone git@github.com:ver01/form.git npm install npm run start visit http://localhost:8888 for schema demo","link":"/zh/docs-form/index.html"},{"title":"Initialize","text":"import npm package Core npm package is @ver01/form. Most of times you need using it with theme (eg: @ver01/form-theme-antd). Or you can define theme by yourself. Uncontrolled Mode With defaultValue props 12345678&lt;Ver01Form schema={{ title: &quot;Uncontrolled Mode:&quot;, type: &quot;string&quot; }} defaultValue=&quot;hello World&quot; onChange={this.onChange.bind(this)}/&gt; Live Demo Controlled Mode with defaultValue props 12345678&lt;Ver01Form schema={{ title: &quot;Controlled Mode:&quot;, type: &quot;string&quot; }} value={this.state.value} onChange={this.onChange.bind(this)}/&gt; Live Demo","link":"/zh/docs-form/initialize.html"},{"title":"JsonSchema","text":"@ver01/form extended Json Schema define with $vf_opt section $vf_opt.propswill mixin to all components belone to one value node. Filtered by Component Schema propsMixinList $vf_opt.widgetstring, assign the component used. Defined in Component Schema widgets $vf_opt.option For array orderable(default true) addable(default true) removeable(default true) For string disabled readonly For object order: [‘first-key’, ‘second-key’, ‘*’, ‘last-key’] $vf_opt.validate[ruleName]: ruleValue see sample-validation local demo Validate can be defined in formProps or buildin validate","link":"/zh/docs-form/jsonSchema.html"},{"title":"Theme","text":"Antd theme is the only them avaliavle now, others will come soon. Vote the theme you wants most By Issue ~~ (1 theme in at most 1 week) Requirement@ver01/form is standalone lib. No other package needed But, you need import form theme package. Which may involve other react component framework (most of time includes in your project already). Official theme Antd Custom themeComponent SchemaWe assigned a JsonLike schema to define ReactComponents Form used. The theme entry file export structure like this. Theme entry file should export structure like this: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576// Export Themeexport default { validators: { // buildin just need msgBuilder minLength: ({ value, ruleValue, schema }) =&gt; ({ errorType: &quot;feedbackStr&quot;, errorData: `should NOT be shorter than ${ruleValue} characters`, }), ... // custom need checkLogic otherCustomValidLogic }, components: { // 5base type string: { getWidget: [({ schema }) =&gt; ({ widgetName: &quot;readonly&quot;, widgetData: { text: &quot;True&quot;}, })], // special widget pick logic: return { widgetName, widgetData } widgets: { select: { formatter: val =&gt; (val ? &quot;true&quot; : &quot;false&quot;), // format value to componet normalizer: val =&gt; (val === &quot;true&quot; ? true : false), // format value to output component: FormItem, // react component propsMixinList: [&quot;style&quot;], // user defined in JsonSchema $vf extend config props: formItemProps, // component props defined in other place children: [ // component children (recursion) { component: Select, propsMixinList: [&quot;placeholder&quot;], props: { // props can dynamic generate with $vf_ prefix; more detail see [Dynamic props generator rule] section below $vf_value: ({ value }) =&gt; value, $vf_onChange: ({ handle }) =&gt; handle.onChange } } ] }, radio: radioWidget // defined as select widget }, // widget define: { [widgetName]: WidgetComponentSchema } errorObjGenerator:({ errors }) =&gt; { const errorMessage = []; errors.map(error =&gt; { const { errorType, errorData } = error; switch (errorType) { default: errorMessage.push(errorData); break; } }); // return as errorObj return errorMessage.length ? { message: ( &lt;ul&gt; {errorMessage.map((it, ind) =&gt; ( &lt;li key={ind}&gt;{it}&lt;/li&gt; ))} &lt;/ul&gt; ), } : null; }, // generator errorObj for WidgetComponentSchema render widget }, number, integer, boolean, null, // 1root only(for body holder) root, // 1control only(for control schema oneof anyof allof) control, // 2container array, object, },}; Dynamic props generator rulefor props123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657 { isRoot: true, rootValue: {}, rootSchema: {}, parentSchema: {}, value: {}, schema: {}, objectKey: \"a\", arrayIndex: 3, handle: { onChange: () =&gt; {}, // for array canMoveUp: false, canMoveDown: false, canAppend: false, canRemove: false, moveUp: () =&gt; {}, moveDown: () =&gt; {}, append: () =&gt; {}, remove: () =&gt; {}, // for control hasSchemaControl: true, // child formnode has SchemaList schemaList: [{ schema: {}, valid: true, selected: true }], // no control is null schemaSelect: ind =&gt; { /* aform func */ }, }, schemaOption: { // read by schema.$vf_opt.option // for array: orderable: true, removable: true, appendable: true, // for string: disabled: false, readonly: false, fileHandle: () =&gt; {}, // ? // for object: order: [\"key_a\", \"key_b\"], }, formProps: { validators: {}, }, formOption: {}, errorObj: { // custom },}; for WidgetComponentSchema1234{ formatter: () =&gt; {}, normalizer: () =&gt; {},}","link":"/zh/docs-form/theme.html"},{"title":"Validate","text":"validate result will export by onValidate method when validate failed, error set as: validateErrValuePath: the path which part valued valid failed. errorObj: Generate by Component Schema errorObjGenerator function. errors: Generate by Component Schema validators function return as array [{ errorType: &quot;errorTypeString&quot;, errorData: AnyType }] 1234567891011121314151617181920212223242526render(){return &lt;div&gt; &lt;Ver01Form schema={{ &quot;type&quot;: &quot;object&quot;, &quot;required&quot;: [ &quot;firstName&quot;, ], &quot;properties&quot;: { &quot;firstName&quot;: { &quot;type&quot;: &quot;string&quot; } } }} value={{ firstName: &apos;&apos; }} // zero length string cause required check onValidate={error=&gt;this.setState({errors: error &amp;&amp; error.errors})} // error : { [validateErrValuePath]: {errorObj, errors} } /&gt; &lt;Button onClick={()=&gt;{ if (this.state.errors){ postServer(this.state.value); }else { console.info(this.state.errors); } }&gt;Submit&lt;/Button&gt;&lt;/div&gt;}","link":"/zh/docs-form/validate.html"},{"title":"Value","text":"Value InUncontrolled Mode You need set the defaultValue props unset defaultValue &amp; value props also caused ver01Form in Uncontrolled Mode The Form will use the defaultValue in first defined, deal with some situation defaultValue set async 123456// uncontrolled Mode:&lt;Ver01Form schema={{ type: &apos;string&apos;}} defaultValue=&apos;helloWorld&apos; onChange={console.info}/&gt; Controlled Mode You need set the value props. onChange will trigger new value, but form will change when value changed. 123456// Controlled Mode:&lt;Ver01Form schema={{ type: &apos;string&apos;}} value={this.state.value} onChange={value=&gt;this.setValue({value})}/&gt; Value OutWe not export some value post method, you can get value by onChange event, then deal with it as you wish 12345678910render(){return &lt;div&gt; &lt;Ver01Form schema={{ type: &apos;string&apos;}} value={this.state.value} onChange={value=&gt;this.setValue({value})} /&gt; &lt;Button onClick={()=&gt;{postServer(this.state.value)}}&gt;Submit&lt;/Button&gt;&lt;/div&gt;}","link":"/zh/docs-form/value.html"}],"posts":[{"title":"Initialize","text":"import npm package Core npm package is @ver01/form. Most of times you need using it with theme (eg: @ver01/form-theme-antd). Or you can define theme by yourself. Uncontrolled Mode With defaultValue props 12345678&lt;Ver01Form schema={{ title: &quot;Uncontrolled Mode:&quot;, type: &quot;string&quot; }} defaultValue=&quot;hello World&quot; onChange={this.onChange.bind(this)}/&gt; Live Demo Controlled Mode with defaultValue props 12345678&lt;Ver01Form schema={{ title: &quot;Controlled Mode:&quot;, type: &quot;string&quot; }} value={this.state.value} onChange={this.onChange.bind(this)}/&gt; Live Demo","link":"/ver01-form/2-Initialize/Initialize/"},{"title":"Start","text":"Ver01Form is standalone lib for render JsonSchem to React Form，with different react themes supports. Online Demo Schema Playground local Demogit clone git@github.com:ver01/form.git npm install npm run start visit http://localhost:8888 for schema demo","link":"/ver01-form/1-Start/Start/"},{"title":"Theme","text":"Antd theme is the only them avaliavle now, others will come soon. Vote the theme you wants most By Issue ~~ (1 theme in at most 1 week) Requirement@ver01/form is standalone lib. No other package needed But, you need import form theme package. Which may involve other react component framework (most of time includes in your project already). Official theme Antd Custom themeComponent SchemaWe assigned a JsonLike schema to define ReactComponents Form used. The theme entry file export structure like this. Theme entry file should export structure like this: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576// Export Themeexport default { validators: { // buildin just need msgBuilder minLength: ({ value, ruleValue, schema }) =&gt; ({ errorType: &quot;feedbackStr&quot;, errorData: `should NOT be shorter than ${ruleValue} characters`, }), ... // custom need checkLogic otherCustomValidLogic }, components: { // 5base type string: { getWidget: [({ schema }) =&gt; ({ widgetName: &quot;readonly&quot;, widgetData: { text: &quot;True&quot;}, })], // special widget pick logic: return { widgetName, widgetData } widgets: { select: { formatter: val =&gt; (val ? &quot;true&quot; : &quot;false&quot;), // format value to componet normalizer: val =&gt; (val === &quot;true&quot; ? true : false), // format value to output component: FormItem, // react component propsMixinList: [&quot;style&quot;], // user defined in JsonSchema $vf extend config props: formItemProps, // component props defined in other place children: [ // component children (recursion) { component: Select, propsMixinList: [&quot;placeholder&quot;], props: { // props can dynamic generate with $vf_ prefix; more detail see [Dynamic props generator rule] section below $vf_value: ({ value }) =&gt; value, $vf_onChange: ({ handle }) =&gt; handle.onChange } } ] }, radio: radioWidget // defined as select widget }, // widget define: { [widgetName]: WidgetComponentSchema } errorObjGenerator:({ errors }) =&gt; { const errorMessage = []; errors.map(error =&gt; { const { errorType, errorData } = error; switch (errorType) { default: errorMessage.push(errorData); break; } }); // return as errorObj return errorMessage.length ? { message: ( &lt;ul&gt; {errorMessage.map((it, ind) =&gt; ( &lt;li key={ind}&gt;{it}&lt;/li&gt; ))} &lt;/ul&gt; ), } : null; }, // generator errorObj for WidgetComponentSchema render widget }, number, integer, boolean, null, // 1root only(for body holder) root, // 1control only(for control schema oneof anyof allof) control, // 2container array, object, },}; Dynamic props generator rulefor props123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657 { isRoot: true, rootValue: {}, rootSchema: {}, parentSchema: {}, value: {}, schema: {}, objectKey: \"a\", arrayIndex: 3, handle: { onChange: () =&gt; {}, // for array canMoveUp: false, canMoveDown: false, canAppend: false, canRemove: false, moveUp: () =&gt; {}, moveDown: () =&gt; {}, append: () =&gt; {}, remove: () =&gt; {}, // for control hasSchemaControl: true, // child formnode has SchemaList schemaList: [{ schema: {}, valid: true, selected: true }], // no control is null schemaSelect: ind =&gt; { /* aform func */ }, }, schemaOption: { // read by schema.$vf_opt.option // for array: orderable: true, removable: true, appendable: true, // for string: disabled: false, readonly: false, fileHandle: () =&gt; {}, // ? // for object: order: [\"key_a\", \"key_b\"], }, formProps: { validators: {}, }, formOption: {}, errorObj: { // custom },}; for WidgetComponentSchema1234{ formatter: () =&gt; {}, normalizer: () =&gt; {},}","link":"/ver01-form/3-Theme/Theme/"},{"title":"Validate","text":"validate result will export by onValidate method when validate failed, error set as: validateErrValuePath: the path which part valued valid failed. errorObj: Generate by Component Schema errorObjGenerator function. errors: Generate by Component Schema validators function return as array [{ errorType: &quot;errorTypeString&quot;, errorData: AnyType }] 1234567891011121314151617181920212223242526render(){return &lt;div&gt; &lt;Ver01Form schema={{ &quot;type&quot;: &quot;object&quot;, &quot;required&quot;: [ &quot;firstName&quot;, ], &quot;properties&quot;: { &quot;firstName&quot;: { &quot;type&quot;: &quot;string&quot; } } }} value={{ firstName: &apos;&apos; }} // zero length string cause required check onValidate={error=&gt;this.setState({errors: error &amp;&amp; error.errors})} // error : { [validateErrValuePath]: {errorObj, errors} } /&gt; &lt;Button onClick={()=&gt;{ if (this.state.errors){ postServer(this.state.value); }else { console.info(this.state.errors); } }&gt;Submit&lt;/Button&gt;&lt;/div&gt;}","link":"/ver01-form/5-Validate/Validate/"},{"title":"JsonSchema","text":"@ver01/form extended Json Schema define with $vf_opt section $vf_opt.propswill mixin to all components belone to one value node. Filtered by Component Schema propsMixinList $vf_opt.widgetstring, assign the component used. Defined in Component Schema widgets $vf_opt.option For array orderable(default true) addable(default true) removeable(default true) For string disabled readonly For object order: [‘first-key’, ‘second-key’, ‘*’, ‘last-key’] $vf_opt.validate[ruleName]: ruleValue see sample-validation local demo Validate can be defined in formProps or buildin validate","link":"/ver01-form/6-JsonSchema/JsonSchema/"},{"title":"Value","text":"Value InUncontrolled Mode You need set the defaultValue props unset defaultValue &amp; value props also caused ver01Form in Uncontrolled Mode The Form will use the defaultValue in first defined, deal with some situation defaultValue set async 123456// uncontrolled Mode:&lt;Ver01Form schema={{ type: &apos;string&apos;}} defaultValue=&apos;helloWorld&apos; onChange={console.info}/&gt; Controlled Mode You need set the value props. onChange will trigger new value, but form will change when value changed. 123456// Controlled Mode:&lt;Ver01Form schema={{ type: &apos;string&apos;}} value={this.state.value} onChange={value=&gt;this.setValue({value})}/&gt; Value OutWe not export some value post method, you can get value by onChange event, then deal with it as you wish 12345678910render(){return &lt;div&gt; &lt;Ver01Form schema={{ type: &apos;string&apos;}} value={this.state.value} onChange={value=&gt;this.setValue({value})} /&gt; &lt;Button onClick={()=&gt;{postServer(this.state.value)}}&gt;Submit&lt;/Button&gt;&lt;/div&gt;}","link":"/ver01-form/4-Value/Value/"},{"title":"JsonSchema","text":"@ver01/form extended Json Schema define with $vf_opt section $vf_opt.propswill mixin to all components belone to one value node. Filtered by Component Schema propsMixinList $vf_opt.widgetstring, assign the component used. Defined in Component Schema widgets $vf_opt.option For array orderable(default true) addable(default true) removeable(default true) For string disabled readonly For object order: [‘first-key’, ‘second-key’, ‘*’, ‘last-key’] $vf_opt.validate[ruleName]: ruleValue see sample-validation local demo Validate can be defined in formProps or buildin validate","link":"/ver01-form/6-JsonSchema/zh/JsonSchema/"},{"title":"Initialize","text":"import npm package Core npm package is @ver01/form. Most of times you need using it with theme (eg: @ver01/form-theme-antd). Or you can define theme by yourself. Uncontrolled Mode With defaultValue props 12345678&lt;Ver01Form schema={{ title: &quot;Uncontrolled Mode:&quot;, type: &quot;string&quot; }} defaultValue=&quot;hello World&quot; onChange={this.onChange.bind(this)}/&gt; Live Demo Controlled Mode with defaultValue props 12345678&lt;Ver01Form schema={{ title: &quot;Controlled Mode:&quot;, type: &quot;string&quot; }} value={this.state.value} onChange={this.onChange.bind(this)}/&gt; Live Demo","link":"/ver01-form/2-Initialize/zh/Initialize/"},{"title":"Start","text":"Ver01Form is standalone lib for render JsonSchem to React Form，with different react themes supports. Online Demo Schema Playground local Demogit clone git@github.com:ver01/form.git npm install npm run start visit http://localhost:8888 for schema demo","link":"/ver01-form/1-Start/zh/Start/"},{"title":"Validate","text":"validate result will export by onValidate method when validate failed, error set as: validateErrValuePath: the path which part valued valid failed. errorObj: Generate by Component Schema errorObjGenerator function. errors: Generate by Component Schema validators function return as array [{ errorType: &quot;errorTypeString&quot;, errorData: AnyType }] 1234567891011121314151617181920212223242526render(){return &lt;div&gt; &lt;Ver01Form schema={{ &quot;type&quot;: &quot;object&quot;, &quot;required&quot;: [ &quot;firstName&quot;, ], &quot;properties&quot;: { &quot;firstName&quot;: { &quot;type&quot;: &quot;string&quot; } } }} value={{ firstName: &apos;&apos; }} // zero length string cause required check onValidate={error=&gt;this.setState({errors: error &amp;&amp; error.errors})} // error : { [validateErrValuePath]: {errorObj, errors} } /&gt; &lt;Button onClick={()=&gt;{ if (this.state.errors){ postServer(this.state.value); }else { console.info(this.state.errors); } }&gt;Submit&lt;/Button&gt;&lt;/div&gt;}","link":"/ver01-form/5-Validate/zh/Validate/"},{"title":"Value","text":"Value InUncontrolled Mode You need set the defaultValue props unset defaultValue &amp; value props also caused ver01Form in Uncontrolled Mode The Form will use the defaultValue in first defined, deal with some situation defaultValue set async 123456// uncontrolled Mode:&lt;Ver01Form schema={{ type: &apos;string&apos;}} defaultValue=&apos;helloWorld&apos; onChange={console.info}/&gt; Controlled Mode You need set the value props. onChange will trigger new value, but form will change when value changed. 123456// Controlled Mode:&lt;Ver01Form schema={{ type: &apos;string&apos;}} value={this.state.value} onChange={value=&gt;this.setValue({value})}/&gt; Value OutWe not export some value post method, you can get value by onChange event, then deal with it as you wish 12345678910render(){return &lt;div&gt; &lt;Ver01Form schema={{ type: &apos;string&apos;}} value={this.state.value} onChange={value=&gt;this.setValue({value})} /&gt; &lt;Button onClick={()=&gt;{postServer(this.state.value)}}&gt;Submit&lt;/Button&gt;&lt;/div&gt;}","link":"/ver01-form/4-Value/zh/Value/"},{"title":"Theme","text":"Antd theme is the only them avaliavle now, others will come soon. Vote the theme you wants most By Issue ~~ (1 theme in at most 1 week) Requirement@ver01/form is standalone lib. No other package needed But, you need import form theme package. Which may involve other react component framework (most of time includes in your project already). Official theme Antd Custom themeComponent SchemaWe assigned a JsonLike schema to define ReactComponents Form used. The theme entry file export structure like this. Theme entry file should export structure like this: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576// Export Themeexport default { validators: { // buildin just need msgBuilder minLength: ({ value, ruleValue, schema }) =&gt; ({ errorType: &quot;feedbackStr&quot;, errorData: `should NOT be shorter than ${ruleValue} characters`, }), ... // custom need checkLogic otherCustomValidLogic }, components: { // 5base type string: { getWidget: [({ schema }) =&gt; ({ widgetName: &quot;readonly&quot;, widgetData: { text: &quot;True&quot;}, })], // special widget pick logic: return { widgetName, widgetData } widgets: { select: { formatter: val =&gt; (val ? &quot;true&quot; : &quot;false&quot;), // format value to componet normalizer: val =&gt; (val === &quot;true&quot; ? true : false), // format value to output component: FormItem, // react component propsMixinList: [&quot;style&quot;], // user defined in JsonSchema $vf extend config props: formItemProps, // component props defined in other place children: [ // component children (recursion) { component: Select, propsMixinList: [&quot;placeholder&quot;], props: { // props can dynamic generate with $vf_ prefix; more detail see [Dynamic props generator rule] section below $vf_value: ({ value }) =&gt; value, $vf_onChange: ({ handle }) =&gt; handle.onChange } } ] }, radio: radioWidget // defined as select widget }, // widget define: { [widgetName]: WidgetComponentSchema } errorObjGenerator:({ errors }) =&gt; { const errorMessage = []; errors.map(error =&gt; { const { errorType, errorData } = error; switch (errorType) { default: errorMessage.push(errorData); break; } }); // return as errorObj return errorMessage.length ? { message: ( &lt;ul&gt; {errorMessage.map((it, ind) =&gt; ( &lt;li key={ind}&gt;{it}&lt;/li&gt; ))} &lt;/ul&gt; ), } : null; }, // generator errorObj for WidgetComponentSchema render widget }, number, integer, boolean, null, // 1root only(for body holder) root, // 1control only(for control schema oneof anyof allof) control, // 2container array, object, },}; Dynamic props generator rulefor props123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657 { isRoot: true, rootValue: {}, rootSchema: {}, parentSchema: {}, value: {}, schema: {}, objectKey: \"a\", arrayIndex: 3, handle: { onChange: () =&gt; {}, // for array canMoveUp: false, canMoveDown: false, canAppend: false, canRemove: false, moveUp: () =&gt; {}, moveDown: () =&gt; {}, append: () =&gt; {}, remove: () =&gt; {}, // for control hasSchemaControl: true, // child formnode has SchemaList schemaList: [{ schema: {}, valid: true, selected: true }], // no control is null schemaSelect: ind =&gt; { /* aform func */ }, }, schemaOption: { // read by schema.$vf_opt.option // for array: orderable: true, removable: true, appendable: true, // for string: disabled: false, readonly: false, fileHandle: () =&gt; {}, // ? // for object: order: [\"key_a\", \"key_b\"], }, formProps: { validators: {}, }, formOption: {}, errorObj: { // custom },}; for WidgetComponentSchema1234{ formatter: () =&gt; {}, normalizer: () =&gt; {},}","link":"/ver01-form/3-Theme/zh/Theme/"}],"tags":[{"name":"React","slug":"React","link":"/tags/React/"},{"name":"Form","slug":"Form","link":"/tags/Form/"},{"name":"JsonSchema","slug":"JsonSchema","link":"/tags/JsonSchema/"},{"name":"Document","slug":"Document","link":"/tags/Document/"}],"categories":[{"name":"@ver01/form","slug":"ver01-form","link":"/categories/ver01-form/"},{"name":"5. Validate","slug":"ver01-form/5-Validate","link":"/categories/ver01-form/5-Validate/"},{"name":"2. Initialize","slug":"ver01-form/2-Initialize","link":"/categories/ver01-form/2-Initialize/"},{"name":"6. JsonSchema","slug":"ver01-form/6-JsonSchema","link":"/categories/ver01-form/6-JsonSchema/"},{"name":"4. Value","slug":"ver01-form/4-Value","link":"/categories/ver01-form/4-Value/"},{"name":"1. Start","slug":"ver01-form/1-Start","link":"/categories/ver01-form/1-Start/"},{"name":"3. Theme","slug":"ver01-form/3-Theme","link":"/categories/ver01-form/3-Theme/"}]}